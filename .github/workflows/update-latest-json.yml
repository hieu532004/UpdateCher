name: update-latest-json

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Extract release info
        id: info
        uses: actions/github-script@v7
        with:
          script: |
            const rel = context.payload.release;
            if (!rel) core.setFailed("No release payload found.");
            const tag = rel.tag_name || "";
            const version = tag.startsWith("v") ? tag.slice(1) : tag;
            const published_at = rel.published_at || new Date().toISOString();
            // chọn asset .exe đầu tiên
            const exe = rel.assets.find(a => a.name && a.name.toLowerCase().endsWith(".exe"));
            if(!exe){ core.setFailed("No .exe asset attached to this release."); return; }
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const downloadUrl = `https://github.com/${owner}/${repo}/releases/download/${encodeURIComponent(tag)}/${encodeURIComponent(exe.name)}`;
            core.setOutput("tag", tag);
            core.setOutput("version", version);
            core.setOutput("published_at", published_at);
            core.setOutput("asset_id", exe.id.toString());
            core.setOutput("asset_name", exe.name);
            core.setOutput("download_url", downloadUrl);

      - name: Download .exe asset
        env: { GH_TOKEN: ${{ github.token }} }
        run: |
          set -e
          ASSET_ID='${{ steps.info.outputs.asset_id }}'
          API="https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/assets/${ASSET_ID}"
          curl -L -H "Authorization: token $GH_TOKEN" -H "Accept: application/octet-stream" "$API" -o installer.exe
          ls -l installer.exe

      - name: Compute SHA256
        id: hash
        run: |
          sha=$(sha256sum installer.exe | awk '{print $1}')
          echo "sha256=$sha" >> $GITHUB_OUTPUT

      - name: Build latest.json
        run: |
          mkdir -p docs
          cat > docs/latest.json <<JSON
          {
            "version": "${{ steps.info.outputs.version }}",
            "releaseDate": "${{ steps.info.outputs.published_at }}",
            "notes": "${{ github.event.release.name || github.event.release.tag_name }}",
            "downloadUrl": "${{ steps.info.outputs.download_url }}",
            "sha256": "${{ steps.hash.outputs.sha256 }}"
          }
          JSON
          cat docs/latest.json

      - name: Commit & push latest.json
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add docs/latest.json
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: update latest.json for ${{ steps.info.outputs.tag }}"
            git push
          fi
